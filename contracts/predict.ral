Contract Predictalph (
    punterTemplateId: ByteVec,
    roundTemplateId: ByteVec,
    mut epoch: U256,
    mut operator: Address,
    mut feesBasisPts: U256,
    mut repeatEvery: U256,
    mut claimedByAnyoneDelay: U256     
) extends DynamicArrayForInt() {

    event BetBull(from: Address, epoch: U256, amount: U256, up: Bool, claimedByAnyoneTimestamp: U256)
    event BetBear(from: Address, epoch: U256, amount: U256, up: Bool, claimedByAnyoneTimestamp: U256)
    event RoundEnded(epoch: U256, price: U256)
    event RoundStarted(epoch: U256, price: U256)
    event Claimed(punterAddress: Address, from:Address, amount: U256, epoch: U256)

    enum ErrorCodes {
        PunterNotExists = 1
        InvalidPunterAddress = 2
        InvalidCaller = 3
        BidTimestampReached = 4
        RoundAlreadyRunning = 5
        RoundDidntEnd = 6
        RoundNotExists = 7
        AlreadyPlayed = 8
        NotEnoughAlph = 9
        CannotBeClaimedYet = 10
    }

    enum SubContractTypes {
        Round = #00
        Punter = #01
    }

  
  //fn getBetInfo(from: Address) -> (Punter) {
   // let bidderContractId = subContractId!(#01 ++ toByteVec!(from) ++ u256To4Byte!(epoch))
    //assert!(contractExists!(bidderContractId), ErrorCodes.PunterNotExists)

   // return Punter(bidderContractId)
//}

    fn getCurrentRound() -> (Round) {
        let roundContractId = subContractId!(SubContractTypes.Round ++ u256To4Byte!(epoch))
        emit Debug(`Round contract id ${roundContractId}`)
        assert!(contractExists!(roundContractId), ErrorCodes.RoundNotExists)

        return Round(roundContractId)
    }

    fn getRoundByEpoch(epochToGet: ByteVec) -> (Round) {
        let roundContractId = subContractId!(SubContractTypes.Round ++ epochToGet)
        emit Debug(`Round contract id ${roundContractId}`)
        assert!(contractExists!(roundContractId), ErrorCodes.RoundNotExists)

        return Round(roundContractId)
    }

    fn getBetInfoByEpoch(from: Address, epochToGet: ByteVec) -> Punter {
        let bidderContractId = subContractId!(SubContractTypes.Punter ++ toByteVec!(from) ++ epochToGet)
        assert!(contractExists!(bidderContractId), ErrorCodes.PunterNotExists)
    
        return Punter(bidderContractId)
    }

    @using(updateFields = false, preapprovedAssets = true, checkExternalCaller = true)
    pub fn startRound(price: U256) -> (){
        let caller = callerAddress!()

        checkCaller!(caller == operator, ErrorCodes.InvalidCaller)

        let roundContractPath = SubContractTypes.Round ++ u256To4Byte!(epoch)

        assert!(!contractExists!(subContractId!(roundContractPath)), ErrorCodes.RoundAlreadyRunning)
        emit Debug(`Round contract id ${roundContractPath}`)
        emit Debug(`Actual epoch is ${epoch} with start price ${price}`)

        let bidTimestampEnd = blockTimeStamp!() + repeatEvery
        let (encodedImmFields, encodedMutFields) = Round.encodeFields!(selfContract!(), epoch, price,feesBasisPts,bidTimestampEnd, operator,false,0 ,0 ,0 ,0 ,0, 0, 0, 0)

        copyCreateSubContract!{caller -> ALPH: 1 alph}(roundContractPath, roundTemplateId, encodedImmFields, encodedMutFields)
        emit RoundStarted(epoch, price)
    }

    @using(updateFields = true, checkExternalCaller = true)
    pub fn endRound(actualPrice: U256) -> () {
        let caller = callerAddress!()

        checkCaller!(caller == operator, ErrorCodes.InvalidCaller)

        let round = getCurrentRound()
        let endRoundTimestamp = round.getEndRoundTime()

        assert!(endRoundTimestamp <= blockTimeStamp!(), ErrorCodes.RoundDidntEnd)

        round.calculateRewards(actualPrice)

        emit RoundEnded(epoch, actualPrice)
        epoch = epoch + 1
    }

    @using(preapprovedAssets = true, checkExternalCaller = false, updateFields = false)
    pub fn bid(amount: U256, up: Bool) -> (){
        let caller = callerAddress!()

        let round = getCurrentRound()
        let endRoundTimestamp = round.getEndRoundTime()
        let timestampNow = blockTimeStamp!()
        assert!(timestampNow < endRoundTimestamp, ErrorCodes.BidTimestampReached)
        assert!(isAssetAddress!(caller), ErrorCodes.InvalidPunterAddress)
        assert!(amount >= 1 alph, ErrorCodes.NotEnoughAlph)

        // use address for the path to be able to find it back 
        let bidderContractId =  SubContractTypes.Punter ++ toByteVec!(caller) ++ u256To4Byte!(epoch)

        // user never played, create contract
        assert!(!contractExists!(subContractId!(bidderContractId)), ErrorCodes.AlreadyPlayed)

       
        let bidAmount = amount - 1 alph
        let claimedByAnyoneTimestamp = timestampNow+claimedByAnyoneDelay
        let (encodedImmFields, encodedMutFields) = Punter.encodeFields!(selfContract!(), caller, epoch, up, bidAmount, claimedByAnyoneTimestamp)
        copyCreateSubContract!{caller -> ALPH: 1 alph}(bidderContractId, punterTemplateId, encodedImmFields, encodedMutFields)
        round.updateAmount{caller -> ALPH: bidAmount}(caller, bidAmount, up)
        
               

        if (up){
            emit BetBull(caller, epoch, amount, up, claimedByAnyoneTimestamp)
        } else {
            emit BetBear(caller, epoch, amount, up, claimedByAnyoneTimestamp)
        }
        
    }

    @using(checkExternalCaller = false)
    pub fn withdraw(arrayEpochIn: ByteVec) -> () {
        let caller = callerAddress!()

        for (let mut index = 0; index < size!(arrayEpochIn)/4; index = index + 1) {
            let epochNumber = getArrayElem(arrayEpochIn, index)
            let roundContractId = subContractId!(SubContractTypes.Round ++ epochNumber)
            let betInfoContractId = subContractId!(SubContractTypes.Punter ++ toByteVec!(caller) ++ epochNumber)

            assert!(contractExists!(roundContractId), ErrorCodes.RoundNotExists)
            assert!(contractExists!(betInfoContractId), ErrorCodes.PunterNotExists)

            let betInfoCaller = getBetInfoByEpoch(caller, epochNumber)
            
            let addressPunter = betInfoCaller.getAddress()
            checkCaller!(caller == addressPunter, ErrorCodes.InvalidCaller)
            

            let amountPunter = betInfoCaller.getAmountBid()
            let upBid = betInfoCaller.getBid()

            let round = getRoundByEpoch(epochNumber)

            // cannot claim if the round didnt end 

            round.userClaimRewards(addressPunter, amountPunter, upBid)
            betInfoCaller.destroy()

            // emit who call and with and which punter it concerned
            emit Claimed(addressPunter ,caller ,amountPunter, u256From4Byte!(epochNumber))
        }
    }


    @using(checkExternalCaller = false)
    pub fn withdrawAddress(arrayEpochIn: ByteVec, addressToClaim: Address) -> () {
        let caller = callerAddress!()
        let timestampNow = blockTimeStamp!()

        for (let mut index = 0; index < size!(arrayEpochIn)/4; index = index + 1) {
            let epochNumber = getArrayElem(arrayEpochIn, index)
            let roundContractId = subContractId!(SubContractTypes.Round ++ epochNumber)
            let betInfoContractId = subContractId!(SubContractTypes.Punter ++ toByteVec!(addressToClaim) ++ epochNumber)
            assert!(contractExists!(roundContractId), ErrorCodes.RoundNotExists)
            assert!(contractExists!(betInfoContractId), ErrorCodes.PunterNotExists)

            if(contractExists!(roundContractId) && contractExists!(betInfoContractId)){
                let betInfoCaller = getBetInfoByEpoch(addressToClaim, epochNumber)
                
                let addressPunter = betInfoCaller.getAddress()
                let canBeClaimedAt = betInfoCaller.getClaimedByAnyone()
                
                assert!(timestampNow > canBeClaimedAt, ErrorCodes.CannotBeClaimedYet)


                let amountPunter = betInfoCaller.getAmountBid()
                let upBid = betInfoCaller.getBid()

                let round = getRoundByEpoch(epochNumber)

                // cannot claim if the round didnt end 

                round.userClaimRewards(addressToClaim, amountPunter, upBid)
                betInfoCaller.destroyByOther(caller)

                // emit who call and with and which punter it concerned
                emit Claimed(addressPunter ,caller ,amountPunter, u256From4Byte!(epochNumber))

            }
        }
    }

    

    @using(updateFields = true, checkExternalCaller = false)
    pub fn setNewRepeatEvery(newRecurrence: U256) -> (){
        checkCaller!(callerAddress!() == operator, ErrorCodes.InvalidCaller)
        repeatEvery = newRecurrence

    }

    pub fn destroyRound(epochArray: ByteVec) -> (){
        checkCaller!(callerAddress!() == operator, ErrorCodes.InvalidCaller)

        for (let mut index = 0; index < size!(epochArray)/4; index = index + 1) {
            let epochNumber = getArrayElem(epochArray, index)

            let roundContractId = subContractId!(SubContractTypes.Round ++ epochNumber)
            if (contractExists!(roundContractId)){
                let round = getRoundByEpoch(epochNumber)
                round.destroy()
            }
        }

    }

    @using(updateFields = true, checkExternalCaller = false)
    pub fn setNewFees(basisPts: U256) -> (){
        checkCaller!(callerAddress!() == operator, ErrorCodes.InvalidCaller)
        feesBasisPts = basisPts
        
    }

    @using(updateFields = true, checkExternalCaller = false)
    pub fn setNewOperator(newOperator: Address) -> (){
        checkCaller!(callerAddress!() == operator, ErrorCodes.InvalidCaller)
        operator = newOperator
    }

    @using(updateFields = true, checkExternalCaller = false)
    pub fn setNewClaimedByAnyone(newClaimedByAnyoneDelay: U256) -> (){
        checkCaller!(callerAddress!() == operator, ErrorCodes.InvalidCaller)
        claimedByAnyoneDelay = newClaimedByAnyoneDelay
    }

}
