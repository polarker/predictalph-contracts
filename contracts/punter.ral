Contract Punter(
    prediction: Predictalph,
    punterAddress: Address,
    epoch: U256,
    upBid: Bool,
    amountBid: U256,
    claimedByAnyoneAt: U256
) {

    enum ErrorCodes {
        InvalidCaller = 200
      }


    pub fn getAddress() -> (Address){
        return punterAddress
    }

    pub fn getBid() -> (Bool){
        return upBid
    }

    pub fn getAmountBid() -> (U256) {
        return amountBid
    }

    pub fn getRoundEpoch() -> (U256){
        return epoch
    }

    pub fn getClaimedByAnyone() -> (U256){
        return claimedByAnyoneAt
    }

    @using(assetsInContract = true)
    pub fn destroy() -> (){
        checkCaller!(callerContractId!() == contractId!(prediction), ErrorCodes.InvalidCaller)
        destroySelf!(punterAddress)
    }

    // Not sure you want to charge a bit fee in this case, to cover the gas fee for example
    // It's fine in this way for the first version I think
    @using(assetsInContract = true)
    pub fn destroyByOther(from: Address) -> (){
        checkCaller!(callerContractId!() == contractId!(prediction), ErrorCodes.InvalidCaller)
        destroySelf!(from)
    }
}
